#BlueJ class context
comment0.target=Schedule
comment1.params=graphFile\ hFile
comment1.target=Schedule(java.lang.String,\ java.lang.String)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Schedule.\n\ \n\ @param\ \ \ graphFile\ \ \ \ name\ of\ the\ tgf\ file\ for\ the\ graph\n\ @param\ \ \ hfile\ \ \ \ \ \ \ \ name\ of\ the\ txt\ file\ for\ the\ requirements\ hashmap\n
comment10.params=c
comment10.target=boolean\ fulfillsOtherReq(Course)
comment10.text=\ \n\ Checks\ if\ a\ course\ fulfills\ a\ required\ group\ of\ courses\ for\ the\ major.\ This\ includes\n\ taking\ a\ 200\ level\ course\ (2XX),\ a\ 300\ level\ course\ (3XX),\ or\ a\ 200\ OR\ 300\ level\ course\ (2ZZ).\n\ If\ it\ fulfills\ a\ requirement,\ it\ updates\ the\ hashmap\ containing\ the\ requirements\ for\ the\ major.\n\n\ @param\ \ \ c\ \ \ the\ course\ to\ check\n\ @return\ \ \ \ \ \ boolean\ representation\ of\ whether\ or\ not\ the\ course\ fills\ a\ major\ requirement.\n
comment11.params=
comment11.target=void\ fillAllReqs()
comment11.text=\ \n\ Traverses\ the\ graph\ using\ fillReqs\ to\ make\ sure\ that\ each\ course\ is\ visited\ and\ \n\ has\ its\ requirement\ filled\ in.\n\ \n
comment12.params=startV\ visited
comment12.target=boolean[]\ fillReqs(Course,\ boolean[])
comment12.text=\ \n\ Traverses\ a\ graph\ from\ the\ given\ start\ point\ and\ fills\ in\ the\ requirement\ for\n\ each\ class\ that\ it\ visits.\n\ \n\ @param\ \ \ startV\ \ \ the\ start\ point\ for\ traversal\n\ @param\ \ \ visited\ \ a\ boolean\ array\ keeping\ track\ of\ which\ nodes\ have\ been\ visited\n\ @return\ \ \ \ \ \ \ \ \ \ \ boolean\ array\ of\ traversed\ courses\n
comment13.params=
comment13.target=java.util.ArrayList\ findSkippableClasses()
comment13.text=\ \n\ Returns\ an\ ArrayList\ containing\ all\ the\ classes\ a\ student\ can\ skip/test\ out\ of.\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ \ ArrayList\ representation\ all\ skippable\ classes\n
comment14.params=startCourse
comment14.target=void\ skipClasses(Course)
comment15.params=skipToClass
comment15.target=void\ createASchedule(Course)
comment15.text=\ \n\ Creates\ a\ schedule\ using\ queueBFS,\ starting\ from\ the\ given\ start\ point.\ Also\ fills\ in\ any\ \n\ remaining\ units\ that\ are\ not\ covered\ by\ the\ requirements.\n\ \n\ @param\ \ \ start\ \ \ starting\ point\ for\ the\ traversal\n
comment16.params=sched\ numSem
comment16.target=java.util.ArrayList\ getSem(javafoundations.ArrayQueue,\ int)
comment16.text=\ \n\ Returns\ an\ ArrayList\ containing\ a\ single\ semester's\ worth\ of\ classes.\n\ \n\ @param\ \ \ sched\ \ \ the\ full\ schedule\ of\ classes\ form\ which\ do\ dequeue\n\ @param\ \ \ numSem\ \ the\ number\ of\ semesters\ a\ student\ will\ have\n\ @return\ \ \ \ \ \ \ \ \ \ \ ArrayList\ representation\ of\ a\ semester\n
comment17.params=
comment17.target=java.util.ArrayList\ getStartingCourses()
comment18.params=
comment18.target=java.util.ArrayList\ getCourses()
comment19.params=
comment19.target=java.lang.String\ toString()
comment19.text=\ \n\ Creates\ and\ returns\ a\ string\ representation\ of\ a\ schedule.\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ \ string\ representation\ of\ a\ schedule\n
comment2.params=tgf_file_name
comment2.target=AdjListsGraph\ AdjListsGraphFile(java.lang.String)
comment2.text=\ \n\ Creates\ and\ returns\ a\ new\ graph\ using\ the\ given\ file.\ If\ the\ file\n\ cannot\ be\ found,\ an\ error\ message\ is\ printed\n\ \n\ @param\ \ \ tgf_file_name\ \ \ name\ of\ the\ tgf\ file\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ graph\ according\ to\ the\ given\ file\n
comment3.params=
comment3.target=java.util.HashMap\ txtFileToHashMap()
comment3.text=\ \n\ Creates\ a\ HashMap\ out\ of\ a\ txt\ file.\ The\ key\ is\ the\ name\ of\ the\ class\ and\ the\ \n\ value\ the\ number\ of\ times\ that\ class\ has\ to\ be\ taken.\n\ \n\ @return\ \ \ a\ hashmap\ with\ the\ key\ as\ the\ name\ of\ the\ class\ and\ value\ as\ the\ amount\ of\ the\ class\n
comment4.params=startV\ visited
comment4.target=boolean[]\ queueBFS(Course,\ boolean[])
comment4.text=\ \n\ Performs\ a\ randomized\ breadth-first\ search\ traversal\ of\ a\ graph\ starting\ \n\ from\ the\ given\ start\ point,\ startV.\ Enqueues\ points\ of\ traversal\ into\ \n\ schedule\ queue.\ Returns\ a\ boolean\ array\ of\ which\ nodes\ have\ been\ visited.\n\ \n\ @param\ \ \ startV\ \ \ the\ start\ point\ for\ traversal\n\ @param\ \ \ visited\ \ a\ boolean\ array\ keeping\ track\ of\ which\ nodes\ have\ been\ visited\n\ @return\ \ \ \ \ \ \ \ \ \ \ boolean\ array\ of\ traversed\ courses\n
comment5.params=
comment5.target=java.lang.String\ getMajor()
comment5.text=\ \n\ Getter\ for\ name\ of\ the\ major\n\ \n\ @return\ \ \ name\ of\ the\ major\n
comment6.params=newMajor
comment6.target=void\ setMajor(java.lang.String)
comment6.text=\ \n\ Setter\ for\ name\ of\ the\ major\n\ \n\ @param\ \ \ newMajor\ \ \ new\ major\n
comment7.params=str
comment7.target=boolean\ isNumeric(java.lang.String)
comment7.text=\ \n\ Checks\ if\ a\ string\ contains\ only\ numbers\ using\ try-catch\ exceptions.\n\ \n\ @param\ \ \ str\ \ \ the\ string\ to\ check\n\ @return\ \ \ \ \ \ boolean\ representation\ of\ whether\ or\ not\ the\ string\ is\ numeric\n
comment8.params=
comment8.target=Course\ findSmallestReq()
comment8.text=\ \n\ Finds\ the\ lowest\ level\ course\ out\ of\ all\ the\ requirements\ and\ returns\ that\ course.\n\ \n\ @return\ \ \ \ \ \ lowest\ level\ requirement\n
comment9.params=c
comment9.target=boolean\ fulfillsNormalReq(Course)
comment9.text=\ \n\ Checks\ if\ a\ course\ fulfills\ a\ required\ course\ for\ a\ major\ for\ courses\ that\ are\n\ explicitly\ mentioned\ in\ the\ major\ requirement.\ This\ includes\ courses\ that\ are\n\ part\ of\ a\ group\ of\ courses\ required\ for\ the\ major\ (ie\ take\ 2\ of\ 200,\ 220,\ 225,\ or\ 255).\n\ If\ it\ fulfills\ a\ requirement,\ it\ updates\ the\ hashmap\ containing\ the\ requirements\ for\ the\ major.\n\n\ @param\ \ \ c\ \ \ the\ course\ to\ check\n\ @return\ \ \ \ \ \ boolean\ representation\ of\ whether\ or\ not\ the\ course\ fills\ a\ major\ requirement.\n
numComments=20
