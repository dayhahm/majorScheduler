#BlueJ class context
comment0.target=AdjListsGraph
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\n\ Constructor.\ Creates\ an\ empty\ graph.\n
comment10.params=index
comment10.target=void\ removeVertex(int)
comment10.text=\n\ Helper\ method.\ Removes\ the\ vertex\ at\ the\ given\ index\ from\ the\ graph.\ \ \ \n\ Note\ that\ this\ may\ affect\ the\ index\ values\ of\ other\ vertices.\n
comment11.params=vertex1\ vertex2
comment11.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment11.text=\n\ Adds\ an\ edge\ between\ two\ vertices\ in\ the\ graph.\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ the\ graph\ is\ not\ altered.\n\ @param\ vertex1\ \ \ one\ of\ the\ end\ points\ of\ the\ edge\n\ @param\ vertex2\ \ \ the\ other\ end\ point\ of\ the\ edge\n
comment12.params=source\ destination
comment12.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment12.text=\n\ Adds\ an\ arc\ with\ origin\ v1\ and\ destination\ v2.\n\ If\ one\ of\ the\ vertices\ 9or\ both)\ does\ not\ exist,\ the\ graph\ is\ not\ altered.\n\ @param\ source\ \ \ \ \ \ \ \ The\ point\ of\ origin\ for\ the\ arc\ to\ be\ added\n\ @param\ destination\ \ \ The\ end\ point\ for\ the\ arc\ to\ be\ added\n
comment13.params=index1\ index2
comment13.target=void\ addArc(int,\ int)
comment13.text=\n\ Helper.\ Adds\ an\ arc\ between\ the\ two\ input\ vertices.\n\ PRECONDITION\:\ the\ arc\ does\ not\ exist\ already\n
comment14.params=vertex1\ vertex2
comment14.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment14.text=\n\ Removes\ the\ edge\ between\ the\ two\ input\ vertices.\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ the\ graph\ is\ not\ altered.\n\ @param\ vertex1\ \ \ \ \ \ \ one\ end\ point\ of\ the\ edge\ to\ be\ removed\n\ @param\ vertex2\ \ \ \ \ \ \ the\ other\ end\ point\ of\ the\ edge\ to\ be\ removed\n
comment15.params=vertex1\ vertex2
comment15.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment15.text=\n\ Removes\ the\ arc\ from\ vertex\ v1\ to\ vertex\ v2,\n\ if\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \n\ @param\ vertex1\ \ \ \ \ \ \ the\ origin\ of\ the\ edge\ to\ be\ removed\n\ @param\ vertex2\ \ \ \ \ \ \ the\ destination\ of\ the\ edge\ to\ be\ removed\n
comment16.params=index1\ index2
comment16.target=void\ removeArc(int,\ int)
comment16.text=\n\ Helper.\ Removes\ an\ arc\ from\ index\ v1\ to\ index\ v2.\n
comment17.params=
comment17.target=java.lang.String\ toString()
comment17.text=\n\ \ \ \ Returns\ a\ string\ representation\ of\ the\ graph.\ \n\ \ \ \ @return\ \ \ \ \ A\ string\ represention\ of\ the\ graph,\ which\ includes\ \n\ \ \ \ its\ vertices\ and\ adjacent\ vertices\ from\ each\ one\ of\ them.\n
comment18.params=fName
comment18.target=void\ saveTGF(java.lang.String)
comment18.text=\n\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\n\ If\ the\ file\ does\ not\ exist,\ it\ is\ created.\ If\ it\ exists,\ it\ is\ overwitten.\ \n\ If\ it\ cannot\ save\ the\ file,\ a\ message\ is\ printed.\ \n\ @param\ fName\ \ \ \ \ The\ name\ of\ the\ file\ to\ write\ to\ \n
comment19.params=index
comment19.target=java.util.LinkedList\ getArc(int)
comment19.text=\n\ Gets\ the\ indicated\ arc\n\ \n\ @param\ \ \ index\ \ \ index\ of\ requested\ arc\n\ @return\ \ \ \ \ \ \ \ \ \ requested\ arc\n
comment2.params=tgf_file_name
comment2.target=AdjListsGraph\ AdjListsGraphFromFile(java.lang.String)
comment2.text=\n\ Creates\ and\ returns\ a\ new\ graph\ using\ the\ data\ found\ in\ the\ input\ file.\n\ If\ the\ file\ does\ not\ exist,\ a\ message\ is\ printed.\ \n
comment20.params=index
comment20.target=java.lang.Object\ getVertex(int)
comment20.text=\n\ Gets\ the\ indicated\ vertex\n\ \n\ @param\ \ \ index\ \ \ index\ of\ requested\ vertex\n\ @return\ \ \ \ \ \ \ \ \ \ requested\ vertex\n
comment21.params=vertex
comment21.target=int\ getIndexOfVertex(java.lang.Object)
comment21.text=\n\ Gets\ the\ index\ of\ the\ given\ vertex.\ Return\ -1\ if\ it\ cannot\ be\ found\n\ \n\ @param\ \ \ verted\ \ \ vertex\ whose\ index\ is\ to\ be\ found\n\ @return\ \ \ \ \ \ \ \ \ \ \ index\ of\ vertex,\ -1\ if\ cannot\ be\ found\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\n\ Returns\ true\ if\ the\ graph\ is\ empty\ and\ false\ otherwise.\ \n
comment4.params=
comment4.target=int\ getNumVertices()
comment4.text=\n\ Returns\ the\ number\ of\ vertices\ in\ the\ graph.\n
comment5.params=
comment5.target=int\ getNumArcs()
comment5.text=\n\ Returns\ the\ number\ of\ arcs\ in\ the\ graph\ by\ counting\ them.\n
comment6.params=vertex1\ vertex2
comment6.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment6.text=\n\ Returns\ true\ iff\ a\ connection\ exists\ from\ v1\ to\ v2.\n
comment7.params=vertex1\ vertex2
comment7.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment7.text=\nReturns\ true\ iff\ an\ arc\ exist\ from\ vertex1\ to\ vertex2,\ AND\ an\ arc\ \nexists\ from\ vertex2\ to\ vertex1.\n@param\ vertex1\ \ \ \ The\ origin\ vertex\ for\ the\ edge\n@param\ vertex2\ \ \ \ The\ destination\ vertex\ for\ the\ edge\n@return\ \ \ \ \ \ \ \ \ \ \ true\ if\ an\ edge\ between\ vertex1\ and\ vertex2\ exists,\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ false\ otherwise.\n
comment8.params=vertex
comment8.target=void\ addVertex(java.lang.Object)
comment8.text=\n\ Adds\ the\ input\ vertex\ to\ the\ graph,\ if\ it\ does\ not\ belong\ to\ it\ already.\n\ @param\ The\ vertex\ to\ be\ added\ to\ the\ graph\n
comment9.params=vertex
comment9.target=void\ removeVertex(java.lang.Object)
comment9.text=\n\ Removes\ the\ input\ vertex\ from\ the\ graph.\ Notice\ that\ if\ the\ vertex\ \n\ does\ not\ exist\ in\ the\ graph,\ the\ graph\ is\ not\ altered\ by\ this\ method.\n\ Uses\ equals()\ on\ T\ for\ testing\ equality.\n\ @param\ vertex\ \ \ \ The\ vertex\ to\ be\ removed\ from\ the\ graph\n
numComments=22
